// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: source.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "some.proto";

export enum Feeling {
  INVALID_FEELING = 0,
  POSITIVE = 1,
  NEGATIVE = 2,
  UNKNOWN = 3,
  UNRECOGNIZED = -1,
}

export function feelingFromJSON(object: any): Feeling {
  switch (object) {
    case 0:
    case "INVALID_FEELING":
      return Feeling.INVALID_FEELING;
    case 1:
    case "POSITIVE":
      return Feeling.POSITIVE;
    case 2:
    case "NEGATIVE":
      return Feeling.NEGATIVE;
    case 3:
    case "UNKNOWN":
      return Feeling.UNKNOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Feeling.UNRECOGNIZED;
  }
}

export function feelingToJSON(object: Feeling): string {
  switch (object) {
    case Feeling.INVALID_FEELING:
      return "INVALID_FEELING";
    case Feeling.POSITIVE:
      return "POSITIVE";
    case Feeling.NEGATIVE:
      return "NEGATIVE";
    case Feeling.UNKNOWN:
      return "UNKNOWN";
    case Feeling.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Event {
  type: Event_Type;
  /** @deprecated */
  contactToken?: string | undefined;
  eventToken: string;
  shouldDelete?: boolean | undefined;
}

export enum Event_Type {
  SKIPPED = 0,
  EMAIL = 1,
  CONVERSATION = 2,
  UNRECOGNIZED = -1,
}

export function event_TypeFromJSON(object: any): Event_Type {
  switch (object) {
    case 0:
    case "SKIPPED":
      return Event_Type.SKIPPED;
    case 1:
    case "EMAIL":
      return Event_Type.EMAIL;
    case 2:
    case "CONVERSATION":
      return Event_Type.CONVERSATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Event_Type.UNRECOGNIZED;
  }
}

export function event_TypeToJSON(object: Event_Type): string {
  switch (object) {
    case Event_Type.SKIPPED:
      return "SKIPPED";
    case Event_Type.EMAIL:
      return "EMAIL";
    case Event_Type.CONVERSATION:
      return "CONVERSATION";
    case Event_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FeedbackConversation {
}

export interface MarketingEmail {
}

function createBaseEvent(): Event {
  return { type: 0, contactToken: "", eventToken: "", shouldDelete: false };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.contactToken !== undefined && message.contactToken !== "") {
      writer.uint32(18).string(message.contactToken);
    }
    if (message.eventToken !== "") {
      writer.uint32(26).string(message.eventToken);
    }
    if (message.shouldDelete !== undefined && message.shouldDelete !== false) {
      writer.uint32(96).bool(message.shouldDelete);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contactToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eventToken = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.shouldDelete = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      type: isSet(object.type) ? event_TypeFromJSON(object.type) : 0,
      contactToken: isSet(object.contactToken) ? globalThis.String(object.contactToken) : "",
      eventToken: isSet(object.eventToken) ? globalThis.String(object.eventToken) : "",
      shouldDelete: isSet(object.shouldDelete) ? globalThis.Boolean(object.shouldDelete) : false,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = event_TypeToJSON(message.type);
    }
    if (message.contactToken !== undefined && message.contactToken !== "") {
      obj.contactToken = message.contactToken;
    }
    if (message.eventToken !== "") {
      obj.eventToken = message.eventToken;
    }
    if (message.shouldDelete !== undefined && message.shouldDelete !== false) {
      obj.shouldDelete = message.shouldDelete;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.type = object.type ?? 0;
    message.contactToken = object.contactToken ?? "";
    message.eventToken = object.eventToken ?? "";
    message.shouldDelete = object.shouldDelete ?? false;
    return message;
  },
};

function createBaseFeedbackConversation(): FeedbackConversation {
  return {};
}

export const FeedbackConversation:
  & MessageFns<FeedbackConversation>
  & ExtensionHolder<"feeling", Feeling>
  & ExtensionHolder<"someToken", string> = {
  feeling: <Extension<Feeling>>{
    number: 200,
    tag: 1600,
    repeated: false,
    packed: false,
    encode: (value: Feeling): Uint8Array[] => {
      const encoded: Uint8Array[] = [];
      if (value !== undefined && value !== 0) {
        const writer = new BinaryWriter();
        writer.int32(value);
        encoded.push(writer.finish());
      }
      return encoded;
    },
    decode: (tag: number, input: Uint8Array[]): Feeling => {
      const reader = new BinaryReader(input[input.length - 1] ?? fail());
      return reader.int32() as any;
    },
  },

  someToken: <Extension<string>>{
    number: 202,
    tag: 1618,
    repeated: false,
    packed: false,
    encode: (value: string): Uint8Array[] => {
      const encoded: Uint8Array[] = [];
      if (value !== undefined && value !== "") {
        const writer = new BinaryWriter();
        writer.string(value);
        encoded.push(writer.finish());
      }
      return encoded;
    },
    decode: (tag: number, input: Uint8Array[]): string => {
      const reader = new BinaryReader(input[input.length - 1] ?? fail());
      return reader.string();
    },
  },

  encode(_: FeedbackConversation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeedbackConversation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedbackConversation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FeedbackConversation {
    return {};
  },

  toJSON(_: FeedbackConversation): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FeedbackConversation>, I>>(base?: I): FeedbackConversation {
    return FeedbackConversation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FeedbackConversation>, I>>(_: I): FeedbackConversation {
    const message = createBaseFeedbackConversation();
    return message;
  },
};

function createBaseMarketingEmail(): MarketingEmail {
  return {};
}

export const MarketingEmail:
  & MessageFns<MarketingEmail>
  & ExtensionHolder<"anotherToken", string>
  & ExtensionHolder<"someId", number> = {
  anotherToken: <Extension<string>>{
    number: 100,
    tag: 802,
    repeated: false,
    packed: false,
    encode: (value: string): Uint8Array[] => {
      const encoded: Uint8Array[] = [];
      if (value !== undefined && value !== "") {
        const writer = new BinaryWriter();
        writer.string(value);
        encoded.push(writer.finish());
      }
      return encoded;
    },
    decode: (tag: number, input: Uint8Array[]): string => {
      const reader = new BinaryReader(input[input.length - 1] ?? fail());
      return reader.string();
    },
  },

  someId: <Extension<number>>{
    number: 102,
    tag: 816,
    repeated: false,
    packed: false,
    encode: (value: number): Uint8Array[] => {
      const encoded: Uint8Array[] = [];
      if (value !== undefined && value !== 0) {
        const writer = new BinaryWriter();
        writer.uint64(value);
        encoded.push(writer.finish());
      }
      return encoded;
    },
    decode: (tag: number, input: Uint8Array[]): number => {
      const reader = new BinaryReader(input[input.length - 1] ?? fail());
      return longToNumber(reader.uint64());
    },
  },

  encode(_: MarketingEmail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarketingEmail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarketingEmail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MarketingEmail {
    return {};
  },

  toJSON(_: MarketingEmail): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MarketingEmail>, I>>(base?: I): MarketingEmail {
    return MarketingEmail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarketingEmail>, I>>(_: I): MarketingEmail {
    const message = createBaseMarketingEmail();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface Extension<T> {
  number: number;
  tag: number;
  singularTag?: number;
  encode?: (message: T) => Uint8Array[];
  decode?: (tag: number, input: Uint8Array[]) => T;
  repeated: boolean;
  packed: boolean;
}

function fail(message?: string): never {
  throw new globalThis.Error(message ?? "Failed");
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

export type ExtensionHolder<T extends string, V> = { [key in T]: Extension<V> };
